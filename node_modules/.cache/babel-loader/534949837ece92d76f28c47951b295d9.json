{"ast":null,"code":"// /* ods.js (C) 2014 SheetJS -- http://sheetjs.com */\n// /* vim: set ts=2: */\n// /*jshint -W041 */\n// var ODS = {};\n// (function make_ods(ODS) {\n// /* Open Document Format for Office Applications (OpenDocument) Version 1.2 */\n// var get_utils = function() {\n// \tif(typeof XLSX !== 'undefined') return XLSX.utils;\n// \tif(typeof module !== \"undefined\" && typeof require !== 'undefined') try {\n// \t\treturn require('../' + 'xlsx').utils;\n// \t} catch(e) {\n// \t\ttry { return require('./' + 'xlsx').utils; }\n// \t\tcatch(ee) { return require('xl' + 'sx').utils; }\n// \t}\n// \tthrow new Error(\"Cannot find XLSX utils\");\n// };\n// var has_buf = (typeof Buffer !== 'undefined');\n// function cc2str(arr) {\n// \tvar o = \"\";\n// \tfor(var i = 0; i != arr.length; ++i) o += String.fromCharCode(arr[i]);\n// \treturn o;\n// }\n// function getdata(data) {\n// \tif(!data) return null;\n// \tif(data.data) return data.data;\n// \tif(data.asNodeBuffer && has_buf) return data.asNodeBuffer().toString('binary');\n// \tif(data.asBinary) return data.asBinary();\n// \tif(data._data && data._data.getContent) return cc2str(Array.prototype.slice.call(data._data.getContent(),0));\n// \treturn null;\n// }\n// function safegetzipfile(zip, file) {\n// \tvar f = file; if(zip.files[f]) return zip.files[f];\n// \tf = file.toLowerCase(); if(zip.files[f]) return zip.files[f];\n// \tf = f.replace(/\\//g,'\\\\'); if(zip.files[f]) return zip.files[f];\n// \treturn null;\n// }\n// function getzipfile(zip, file) {\n// \tvar o = safegetzipfile(zip, file);\n// \tif(o == null) throw new Error(\"Cannot find file \" + file + \" in zip\");\n// \treturn o;\n// }\n// function getzipdata(zip, file, safe) {\n// \tif(!safe) return getdata(getzipfile(zip, file));\n// \tif(!file) return null;\n// \ttry { return getzipdata(zip, file); } catch(e) { return null; }\n// }\n// var _fs, jszip;\n// if(typeof JSZip !== 'undefined') jszip = JSZip;\n// if (typeof exports !== 'undefined') {\n// \tif (typeof module !== 'undefined' && module.exports) {\n// \t\tif(has_buf && typeof jszip === 'undefined') jszip = require('js'+'zip');\n// \t\tif(typeof jszip === 'undefined') jszip = require('./js'+'zip').JSZip;\n// \t\t_fs = require('f'+'s');\n// \t}\n// }\n// var attregexg=/\\b[\\w:-]+=[\"'][^\"]*['\"]/g;\n// var tagregex=/<[^>]*>/g;\n// var nsregex=/<\\w*:/, nsregex2 = /<(\\/?)\\w+:/;\n// function parsexmltag(tag, skip_root) {\n// \tvar z = [];\n// \tvar eq = 0, c = 0;\n// \tfor(; eq !== tag.length; ++eq) if((c = tag.charCodeAt(eq)) === 32 || c === 10 || c === 13) break;\n// \tif(!skip_root) z[0] = tag.substr(0, eq);\n// \tif(eq === tag.length) return z;\n// \tvar m = tag.match(attregexg), j=0, w=\"\", v=\"\", i=0, q=\"\", cc=\"\";\n// \tif(m) for(i = 0; i != m.length; ++i) {\n// \t\tcc = m[i];\n// \t\tfor(c=0; c != cc.length; ++c) if(cc.charCodeAt(c) === 61) break;\n// \t\tq = cc.substr(0,c); v = cc.substring(c+2, cc.length-1);\n// \t\tfor(j=0;j!=q.length;++j) if(q.charCodeAt(j) === 58) break;\n// \t\tif(j===q.length) z[q] = v;\n// \t\telse z[(j===5 && q.substr(0,5)===\"xmlns\"?\"xmlns\":\"\")+q.substr(j+1)] = v;\n// \t}\n// \treturn z;\n// }\n// function strip_ns(x) { return x.replace(nsregex2, \"<$1\"); }\n// var encodings = {\n// \t'&quot;': '\"',\n// \t'&apos;': \"'\",\n// \t'&gt;': '>',\n// \t'&lt;': '<',\n// \t'&amp;': '&'\n// };\n// var rencoding = {\n// \t'\"': '&quot;',\n// \t\"'\": '&apos;',\n// \t'>': '&gt;',\n// \t'<': '&lt;',\n// \t'&': '&amp;'\n// };\n// var rencstr = \"&<>'\\\"\".split(\"\");\n// // TODO: CP remap (need to read file version to determine OS)\n// var encregex = /&[a-z]*;/g, coderegex = /_x([\\da-fA-F]+)_/g;\n// function unescapexml(text){\n// \tvar s = text + '';\n// \treturn s.replace(encregex, function($$) { return encodings[$$]; }).replace(coderegex,function(m,c) {return String.fromCharCode(parseInt(c,16));});\n// }\n// var decregex=/[&<>'\"]/g, charegex = /[\\u0000-\\u0008\\u000b-\\u001f]/g;\n// function escapexml(text){\n// \tvar s = text + '';\n// \treturn s.replace(decregex, function(y) { return rencoding[y]; }).replace(charegex,function(s) { return \"_x\" + (\"000\"+s.charCodeAt(0).toString(16)).substr(-4) + \"_\";});\n// }\n// function parsexmlbool(value, tag) {\n// \tswitch(value) {\n// \t\tcase '1': case 'true': case 'TRUE': return true;\n// \t\t/* case '0': case 'false': case 'FALSE':*/\n// \t\tdefault: return false;\n// \t}\n// }\n// function datenum(v) {\n// \tvar epoch = Date.parse(v);\n// \treturn (epoch + 2209161600000) / (24 * 60 * 60 * 1000);\n// }\n// /* ISO 8601 Duration */\n// function parse_isodur(s) {\n// \tvar sec = 0, mt = 0, time = false;\n// \tvar m = s.match(/P([0-9\\.]+Y)?([0-9\\.]+M)?([0-9\\.]+D)?T([0-9\\.]+H)?([0-9\\.]+M)?([0-9\\.]+S)?/);\n// \tif(!m) throw new Error(\"|\" + s + \"| is not an ISO8601 Duration\");\n// \tfor(var i = 1; i != m.length; ++i) {\n// \t\tif(!m[i]) continue;\n// \t\tmt = 1;\n// \t\tif(i > 3) time = true;\n// \t\tswitch(m[i].substr(m[i].length-1)) {\n// \t\t\tcase 'Y':\n// \t\t\t\tthrow new Error(\"Unsupported ISO Duration Field: \" + m[i].substr(m[i].length-1));\n// \t\t\tcase 'D': mt *= 24;\n// \t\t\t\t/* falls through */\n// \t\t\tcase 'H': mt *= 60;\n// \t\t\t\t/* falls through */\n// \t\t\tcase 'M':\n// \t\t\t\tif(!time) throw new Error(\"Unsupported ISO Duration Field: M\");\n// \t\t\t\telse mt *= 60;\n// \t\t\t\t/* falls through */\n// \t\t\tcase 'S': break;\n// \t\t}\n// \t\tsec += mt * parseInt(m[i], 10);\n// \t}\n// \treturn sec;\n// }\n// /* copied from js-xls (C) SheetJS Apache2 license */\n// function xlml_normalize(d) {\n// \tif(has_buf && Buffer.isBuffer(d)) return d.toString('utf8');\n// \tif(typeof d === 'string') return d;\n// \tthrow \"badf\";\n// }\n// var xlmlregex = /<(\\/?)([a-z0-9]*:|)([\\w-]+)[^>]*>/mg;\n// /* Part 3 Section 4 Manifest File */\n// var CT_ODS = \"application/vnd.oasis.opendocument.spreadsheet\";\n// var parse_manifest = function(d, opts) {\n// \tvar str = xlml_normalize(d);\n// \tvar Rn;\n// \tvar FEtag;\n// \twhile((Rn = xlmlregex.exec(str))) switch(Rn[3]) {\n// \t\tcase 'manifest': break; // 4.2 <manifest:manifest>\n// \t\tcase 'file-entry': // 4.3 <manifest:file-entry>\n// \t\t\tFEtag = parsexmltag(Rn[0]);\n// \t\t\tif(FEtag.path == '/' && FEtag.type !== CT_ODS) throw new Error(\"This OpenDocument is not a spreadsheet\");\n// \t\t\tbreak;\n// \t\tcase 'encryption-data': // 4.4 <manifest:encryption-data>\n// \t\tcase 'algorithm': // 4.5 <manifest:algorithm>\n// \t\tcase 'start-key-generation': // 4.6 <manifest:start-key-generation>\n// \t\tcase 'key-derivation': // 4.7 <manifest:key-derivation>\n// \t\t\tthrow new Error(\"Unsupported ODS Encryption\");\n// \t\tdefault: throw Rn;\n// \t}\n// };\n// var parse_text_p = function(text, tag) {\n// \treturn utf8read(text.replace(/<text:s\\/>/g,\" \").replace(/<[^>]*>/g,\"\"));\n// };\n// var utf8read = function utf8reada(orig) {\n// \tvar out = \"\", i = 0, c = 0, d = 0, e = 0, f = 0, w = 0;\n// \twhile (i < orig.length) {\n// \t\tc = orig.charCodeAt(i++);\n// \t\tif (c < 128) { out += String.fromCharCode(c); continue; }\n// \t\td = orig.charCodeAt(i++);\n// \t\tif (c>191 && c<224) { out += String.fromCharCode(((c & 31) << 6) | (d & 63)); continue; }\n// \t\te = orig.charCodeAt(i++);\n// \t\tif (c < 240) { out += String.fromCharCode(((c & 15) << 12) | ((d & 63) << 6) | (e & 63)); continue; }\n// \t\tf = orig.charCodeAt(i++);\n// \t\tw = (((c & 7) << 18) | ((d & 63) << 12) | ((e & 63) << 6) | (f & 63))-65536;\n// \t\tout += String.fromCharCode(0xD800 + ((w>>>10)&1023));\n// \t\tout += String.fromCharCode(0xDC00 + (w&1023));\n// \t}\n// \treturn out;\n// };\n// var parse_content_xml = (function() {\n// \tvar number_formats = {\n// \t\t/* ods name: [short ssf fmt, long ssf fmt] */\n// \t\tday: [\"d\", \"dd\"],\n// \t\tmonth: [\"m\", \"mm\"],\n// \t\tyear: [\"y\", \"yy\"],\n// \t\thours: [\"h\", \"hh\"],\n// \t\tminutes: [\"m\", \"mm\"],\n// \t\tseconds: [\"s\", \"ss\"],\n// \t\t\"am-pm\": [\"A/P\", \"AM/PM\"],\n// \t\t\"day-of-week\": [\"ddd\", \"dddd\"]\n// \t};\n// \treturn function pcx(d, opts) {\n// \t\tvar str = xlml_normalize(d);\n// \t\tvar state = [], tmp;\n// \t\tvar tag;\n// \t\tvar NFtag, NF, pidx;\n// \t\tvar sheetag;\n// \t\tvar Sheets = {}, SheetNames = [], ws = {};\n// \t\tvar Rn, q;\n// \t\tvar ctag;\n// \t\tvar textp, textpidx, textptag;\n// \t\tvar R, C, range = {s: {r:1000000,c:10000000}, e: {r:0, c:0}};\n// \t\tvar number_format_map = {};\n// \t\tvar merges = [], mrange = {}, mR = 0, mC = 0;\n// \t\twhile((Rn = xlmlregex.exec(str))) switch(Rn[3]) {\n// \t\t\tcase 'table': // 9.1.2 <table:table>\n// \t\t\t\tif(Rn[1]==='/') {\n// \t\t\t\t\tif(range.e.c >= range.s.c && range.e.r >= range.s.r) ws['!ref'] = get_utils().encode_range(range);\n// \t\t\t\t\tif(merges.length) ws['!merges'] = merges;\n// \t\t\t\t\tSheetNames.push(sheetag.name);\n// \t\t\t\t\tSheets[sheetag.name] = ws;\n// \t\t\t\t}\n// \t\t\t\telse if(Rn[0].charAt(Rn[0].length-2) !== '/') {\n// \t\t\t\t\tsheetag = parsexmltag(Rn[0]);\n// \t\t\t\t\tR = C = -1;\n// \t\t\t\t\trange.s.r = range.s.c = 10000000; range.e.r = range.e.c = 0;\n// \t\t\t\t\tws = {}; merges = [];\n// \t\t\t\t}\n// \t\t\t\tbreak;\n// \t\t\tcase 'table-row': // 9.1.3 <table:table-row>\n// \t\t\t\tif(Rn[1] === '/') break;\n// \t\t\t\t++R; C = -1; break;\n// \t\t\tcase 'covered-table-cell': // 9.1.5 table:covered-table-cell\n// \t\t\t\t++C; break; /* stub */\n// \t\t\tcase 'table-cell':\n// \t\t\t\tif(Rn[0].charAt(Rn[0].length-2) === '/') {\n// \t\t\t\t\tctag = parsexmltag(Rn[0]);\n// \t\t\t\t\tif(ctag['number-columns-repeated']) C+= parseInt(ctag['number-columns-repeated'], 10);\n// \t\t\t\t\telse ++C;\n// \t\t\t\t}\n// \t\t\t\telse if(Rn[1]!=='/') {\n// \t\t\t\t\t++C;\n// \t\t\t\t\tif(C > range.e.c) range.e.c = C;\n// \t\t\t\t\tif(R > range.e.r) range.e.r = R;\n// \t\t\t\t\tif(C < range.s.c) range.s.c = C;\n// \t\t\t\t\tif(R < range.s.r) range.s.r = R;\n// \t\t\t\t\tctag = parsexmltag(Rn[0]);\n// \t\t\t\t\tq = {t:ctag['value-type'], v:null};\n// \t\t\t\t\tif(ctag['number-columns-spanned'] || ctag['number-rows-spanned']) {\n// \t\t\t\t\t\tmR = parseInt(ctag['number-rows-spanned'],10) || 0;\n// \t\t\t\t\t\tmC = parseInt(ctag['number-columns-spanned'],10) || 0;\n// \t\t\t\t\t\tmrange = {s: {r:R,c:C}, e:{r:R + mR-1,c:C + mC-1}};\n// \t\t\t\t\t\tmerges.push(mrange);\n// \t\t\t\t\t}\n// \t\t\t\t\t/* 19.385 office:value-type */\n// \t\t\t\t\tswitch(q.t) {\n// \t\t\t\t\t\tcase 'boolean': q.t = 'b'; q.v = parsexmlbool(ctag['boolean-value']); break;\n// \t\t\t\t\t\tcase 'float': q.t = 'n'; q.v = parseFloat(ctag.value); break;\n// \t\t\t\t\t\tcase 'percentage': q.t = 'n'; q.v = parseFloat(ctag.value); break;\n// \t\t\t\t\t\tcase 'currency': q.t = 'n'; q.v = parseFloat(ctag.value); break;\n// \t\t\t\t\t\tcase 'date': q.t = 'n'; q.v = datenum(ctag['date-value']); q.z = 'm/d/yy'; break;\n// \t\t\t\t\t\tcase 'time': q.t = 'n'; q.v = parse_isodur(ctag['time-value'])/86400; break;\n// \t\t\t\t\t\tcase 'string': q.t = 's'; break;\n// \t\t\t\t\t\tdefault: throw new Error('Unsupported value type ' + q.t);\n// \t\t\t\t\t}\n// \t\t\t\t} else {\n// \t\t\t\t\tif(q.t === 's') q.v = textp;\n// \t\t\t\t\tif(textp) q.w = textp;\n// \t\t\t\t\tif(!(opts.sheetRows && opts.sheetRows < R)) ws[get_utils().encode_cell({r:R,c:C})] = q;\n// \t\t\t\t\tq = null;\n// \t\t\t\t}\n// \t\t\t\tbreak; // 9.1.4 <table:table-cell>\n// \t\t\t/* pure state */\n// \t\t\tcase 'document-content': // 3.1.3.2 <office:document-content>\n// \t\t\tcase 'spreadsheet': // 3.7 <office:spreadsheet>\n// \t\t\tcase 'scripts': // 3.12 <office:scripts>\n// \t\t\tcase 'font-face-decls': // 3.14 <office:font-face-decls>\n// \t\t\t\tif(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw \"Bad state: \"+tmp;}\n// \t\t\t\telse if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], true]);\n// \t\t\t\tbreak;\n// \t\t\t/* ignore state */\n// \t\t\tcase 'shapes': // 9.2.8 <table:shapes>\n// \t\t\tcase 'frame': // 10.4.2 <draw:frame>\n// \t\t\t\tif(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw \"Bad state: \"+tmp;}\n// \t\t\t\telse if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], false]);\n// \t\t\t\tbreak;\n// \t\t\tcase 'number-style': // 16.27.2 <number:number-style>\n// \t\t\tcase 'percentage-style': // 16.27.9 <number:percentage-style>\n// \t\t\tcase 'date-style': // 16.27.10 <number:date-style>\n// \t\t\tcase 'time-style': // 16.27.18 <number:time-style>\n// \t\t\t\tif(Rn[1]==='/'){\n// \t\t\t\t\tnumber_format_map[NFtag.name] = NF;\n// \t\t\t\t\tif((tmp=state.pop())[0]!==Rn[3]) throw \"Bad state: \"+tmp;\n// \t\t\t\t} else if(Rn[0].charAt(Rn[0].length-2) !== '/') {\n// \t\t\t\t\tNF = \"\";\n// \t\t\t\t\tNFtag = parsexmltag(Rn[0]);\n// \t\t\t\t\tstate.push([Rn[3], true]);\n// \t\t\t\t} break;\n// \t\t\tcase 'script': break; // 3.13 <office:script>\n// \t\t\tcase 'automatic-styles': break; // 3.15.3 <office:automatic-styles>\n// \t\t\tcase 'style': break; // 16.2 <style:style>\n// \t\t\tcase 'font-face': break; // 16.21 <style:font-face>\n// \t\t\tcase 'paragraph-properties': break; // 17.6 <style:paragraph-properties>\n// \t\t\tcase 'table-properties': break; // 17.15 <style:table-properties>\n// \t\t\tcase 'table-column-properties': break; // 17.16 <style:table-column-properties>\n// \t\t\tcase 'table-row-properties': break; // 17.17 <style:table-row-properties>\n// \t\t\tcase 'table-cell-properties': break; // 17.18 <style:table-cell-properties>\n// \t\t\tcase 'number': // 16.27.3 <number:number>\n// \t\t\t\tswitch(state[state.length-1][0]) {\n// \t\t\t\t\tcase 'time-style':\n// \t\t\t\t\tcase 'date-style':\n// \t\t\t\t\t\ttag = parsexmltag(Rn[0]);\n// \t\t\t\t\t\tNF += number_formats[Rn[3]][tag.style==='long'?1:0]; break;\n// \t\t\t\t} break;\n// \t\t\tcase 'day': // 16.27.11 <number:day>\n// \t\t\tcase 'month': // 16.27.12 <number:month>\n// \t\t\tcase 'year': // 16.27.13 <number:year>\n// \t\t\tcase 'era': // 16.27.14 <number:era>\n// \t\t\tcase 'day-of-week': // 16.27.15 <number:day-of-week>\n// \t\t\tcase 'week-of-year': // 16.27.16 <number:week-of-year>\n// \t\t\tcase 'quarter': // 16.27.17 <number:quarter>\n// \t\t\tcase 'hours': // 16.27.19 <number:hours>\n// \t\t\tcase 'minutes': // 16.27.20 <number:minutes>\n// \t\t\tcase 'seconds': // 16.27.21 <number:seconds>\n// \t\t\tcase 'am-pm': // 16.27.22 <number:am-pm>\n// \t\t\t\tswitch(state[state.length-1][0]) {\n// \t\t\t\t\tcase 'time-style':\n// \t\t\t\t\tcase 'date-style':\n// \t\t\t\t\t\ttag = parsexmltag(Rn[0]);\n// \t\t\t\t\t\tNF += number_formats[Rn[3]][tag.style==='long'?1:0]; break;\n// \t\t\t\t} break;\n// \t\t\tcase 'boolean-style': break; // 16.27.23 <number:boolean-style>\n// \t\t\tcase 'boolean': break; // 16.27.24 <number:boolean>\n// \t\t\tcase 'text-style': break; // 16.27.25 <number:text-style>\n// \t\t\tcase 'text': // 16.27.26 <number:text>\n// \t\t\t\tif(Rn[0].substr(-2) === \"/>\") break;\n// \t\t\t\telse if(Rn[1]===\"/\") switch(state[state.length-1][0]) {\n// \t\t\t\t\tcase 'number-style':\n// \t\t\t\t\tcase 'date-style':\n// \t\t\t\t\tcase 'time-style':\n// \t\t\t\t\t\tNF += str.slice(pidx, Rn.index);\n// \t\t\t\t\t\tbreak;\n// \t\t\t\t}\n// \t\t\t\telse pidx = Rn.index + Rn[0].length;\n// \t\t\t\tbreak;\n// \t\t\tcase 'text-content': break; // 16.27.27 <number:text-content>\n// \t\t\tcase 'text-properties': break; // 16.27.27 <style:text-properties>\n// \t\t\tcase 'body': break; // 3.3 16.9.6 19.726.3\n// \t\t\tcase 'forms': break; // 12.25.2 13.2\n// \t\t\tcase 'table-column': break; // 9.1.6 <table:table-column>\n// \t\t\tcase 'graphic-properties': break;\n// \t\t\tcase 'calculation-settings': break; // 9.4.1 <table:calculation-settings>\n// \t\t\tcase 'named-expressions': break; // 9.4.11 <table:named-expressions>\n// \t\t\tcase 'named-range': break; // 9.4.11 <table:named-range>\n// \t\t\tcase 'span': break; // <text:span>\n// \t\t\tcase 'p':\n// \t\t\t\tif(Rn[1]==='/') textp = parse_text_p(str.slice(textpidx,Rn.index), textptag);\n// \t\t\t\telse { textptag = parsexmltag(Rn[0]); textpidx = Rn.index + Rn[0].length; }\n// \t\t\t\tbreak; // <text:p>\n// \t\t\tcase 's': break; // <text:s>\n// \t\t\tcase 'date': break; // <*:date>\n// \t\t\tcase 'annotation': break;\n// \t\t\tcase 'object': break; // 10.4.6.2 <draw:object>\n// \t\t\tcase 'title': break; // <*:title>\n// \t\t\tcase 'desc': break; // <*:desc>\n// \t\t\tcase 'database-ranges': break; // 9.4.14 <table:database-ranges>\n// \t\t\tcase 'database-range': break; // 9.4.15 <table:database-range>\n// \t\t\tcase 'filter': break; // 9.5.2 <table:filter>\n// \t\t\tcase 'filter-and': break; // 9.5.3 <table:filter-and>\n// \t\t\tcase 'filter-or': break; // 9.5.4 <table:filter-or>\n// \t\t\tcase 'filter-condition': break; // 9.5.5 <table:filter-condition>\n// \t\t\tdefault: if(opts.WTF) throw Rn;\n// \t\t}\n// \t\tvar out = {\n// \t\t\tSheets: Sheets,\n// \t\t\tSheetNames: SheetNames\n// \t\t};\n// \t\treturn out;\n// \t};\n// })();\n// /* Part 3: Packages */\n// var parse_ods = function(zip, opts) {\n// \t//var manifest = parse_manifest(getzipdata(zip, 'META-INF/manifest.xml'));\n// \treturn parse_content_xml(getzipdata(zip, 'content.xml'), opts);\n// };\n// ODS.parse_ods = parse_ods;\n// })(typeof exports !== 'undefined' ? exports : ODS);","map":null,"metadata":{},"sourceType":"script"}